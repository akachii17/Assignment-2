{
  "version": 3,
  "sources": ["../../nurbs/src/utils/is-ndarray.js", "../../nurbs/src/utils/is-ndarray-like.js", "../../nurbs/src/utils/is-array-like.js", "../../nurbs/src/utils/infer-type.js", "../../nurbs/src/utils/cache-key.js", "../../nurbs/src/utils/variable.js", "../../nurbs/src/utils/create-accessors.js", "../../nurbs/src/numerical-derivative.js", "../../nurbs/src/utils/ndloop.js", "../../nurbs/src/utils/accessor-preamble.js", "../../nurbs/src/utils/size-getter.js", "../../nurbs/src/evaluate.js", "../../nurbs/src/transform.js", "../../nurbs/src/support.js", "../../nurbs/nurbs.js"],
  "sourcesContent": ["'use strict';\n\n// Source: https://github.com/scijs/isndarray\n// By Kyle Robinson Young, MIT Licensed.\n\nmodule.exports = function (arr) {\n  if (!arr) return false;\n  if (!arr.dtype) return false;\n  var re = new RegExp('function View[0-9]+d(:?' + arr.dtype + ')+');\n  return re.test(String(arr.constructor));\n};\n", "module.exports = function (arr) {\n  if (!arr) return false;\n  return (\n    arr.data !== undefined &&\n    Array.isArray(arr.shape) &&\n    arr.offset !== undefined &&\n    arr.stride !== undefined\n  );\n};\n", "'use strict';\n\nmodule.exports = function isArrayLike (data) {\n  return Array.isArray(data) || ArrayBuffer.isView(data);\n};\n", "'use strict';\n\nvar isNdarray = require('./is-ndarray');\nvar isNdarrayLike = require('./is-ndarray-like');\nvar isArrayLike = require('./is-array-like');\n\nfunction inferType (x) {\n  if (!x) {\n    return undefined;\n  }\n  if (isNdarray(x) || isNdarrayLike(x)) {\n    if (x.dtype === 'generic') {\n      return inferType.GENERIC_NDARRAY;\n    }\n    return inferType.NDARRAY;\n  } else {\n    if (isArrayLike(x)) {\n      // if (isArrayLike(x[0])) {\n      return inferType.ARRAY_OF_ARRAYS;\n      // }\n      // return inferType.PACKED;\n    }\n    throw new Error('Unhandled data type. Got type: ' + (typeof x));\n  }\n}\n\ninferType.ARRAY_OF_ARRAYS = 'Arr';\ninferType.NDARRAY = 'Nd';\ninferType.GENERIC_NDARRAY = 'GenNd';\ninferType.PACKED = 'PackArr';\n\nmodule.exports = inferType;\n", "'use strict';\n\nvar isArrayLike = require('./is-array-like');\n\nfunction capitalize (str) {\n  return str[0].toUpperCase() + str.slice(1);\n}\n\nmodule.exports = function (nurbs, debug, checkBounds, pointType, weightType, knotType) {\n  var d;\n  var degreeParts = [];\n  var hasAnyKnots = false;\n  for (d = 0; d < nurbs.splineDimension; d++) {\n    var hasKnots = isArrayLike(nurbs.knots) && isArrayLike(nurbs.knots[d]);\n    if (hasKnots) hasAnyKnots = true;\n    degreeParts.push(\n      'Deg' +\n      nurbs.degree[d] +\n      (hasKnots ? '' : 'Uniform') +\n      capitalize(nurbs.boundary[d])\n    );\n  }\n  var parts = [\n    [\n      hasAnyKnots ? 'NU' : '',\n      nurbs.weights ? 'RBS' : 'BS'\n    ].join('') +\n    nurbs.dimension + 'D',\n    degreeParts.join('_')\n  ];\n\n  if (pointType) {\n    parts.push(pointType + 'Pts');\n  }\n  if (weightType) {\n    parts.push(weightType + 'Wts');\n  }\n  if (knotType) {\n    parts.push(knotType + 'Kts');\n  }\n\n  if (debug) {\n    parts.push('debug');\n  }\n\n  if (checkBounds) {\n    parts.push('chk');\n  }\n\n  return parts.join('_');\n};\n", "'use strict';\n\nvar createVariable = function createVariable (name, nurbs) {\n  return function (i, period) {\n    if (i !== undefined && !Array.isArray(i)) i = [i];\n    var dimAccessors = [];\n    for (var j = 0; j < i.length; j++) {\n      dimAccessors.push(createVariable.sum(i[j]));\n    }\n    if (period) {\n      for (i = 0; i < dimAccessors.length; i++) {\n        if (period[i] === undefined) continue;\n        dimAccessors[i] = '(' + dimAccessors[i] + ' + ' + period[i] + ') % ' + period[i];\n      }\n    }\n    return name + dimAccessors.join('_');\n  };\n};\n\ncreateVariable.sum = function (parts) {\n  parts = Array.isArray(parts) ? parts : [parts];\n  parts = parts.filter(function (part) { return part !== undefined && part !== 0; });\n  if (parts.length === 0) parts.push(0);\n  return parts.join(' + ');\n};\n\nmodule.exports = createVariable;\n", "'use strict';\n\nvar inferType = require('./infer-type');\nvar createVariable = require('./variable');\n\nfunction wrapAccessor (callback) {\n  return function (i, period) {\n    if (i !== undefined && !Array.isArray(i)) i = [i];\n    var dimAccessors = [];\n    for (var j = 0; j < i.length; j++) {\n      dimAccessors.push(createVariable.sum(i[j]));\n    }\n    if (period) {\n      for (i = 0; i < dimAccessors.length; i++) {\n        if (period[i] === undefined) continue;\n        dimAccessors[i] = '(' + dimAccessors[i] + ' + ' + period[i] + ') % ' + period[i];\n      }\n    }\n    return callback(dimAccessors);\n  };\n}\n\nfunction createAccessor (name, data) {\n  var i;\n  if (!data) return undefined;\n  switch (inferType(data)) {\n    case inferType.ARRAY_OF_ARRAYS:\n      return wrapAccessor(function (accessors) {\n        return name + '[' + accessors.join('][') + ']';\n      });\n    case inferType.GENERIC_NDARRAY:\n      return wrapAccessor(function (accessors) {\n        return name + '.get(' + accessors.join(',') + ')';\n      });\n    case inferType.NDARRAY:\n      return wrapAccessor(function (accessors) {\n        var code = [name + 'Offset'];\n        for (i = 0; i < accessors.length; i++) {\n          code.push(name + 'Stride' + i + ' * (' + accessors[i] + ')');\n        }\n        return name + '[' + code.join(' + ') + ']';\n      });\n    case inferType.PACKED:\n    default:\n      return undefined;\n  }\n}\n\nmodule.exports = function (nurbs) {\n  var accessors = {};\n  var accessor;\n\n  accessor = createAccessor('x', nurbs.points);\n  if (accessor) accessors.point = accessor;\n\n  accessor = createAccessor('w', nurbs.weights);\n  if (accessor) accessors.weight = accessor;\n\n  accessor = createAccessor('k', nurbs.knots);\n  if (accessor) accessors.knot = accessor;\n\n  return accessors;\n};\n", "'use strict';\n\nvar args = [];\nvar tmp = [];\n\nmodule.exports = function numericalDerivative (out, order, dimension) {\n  if (order !== 1) {\n    throw new Error('Numerical derivative not implemented for order n = ' + order + '.');\n  }\n\n  var i;\n  var h = arguments[this.splineDimension + 3] === undefined ? 1e-4 : arguments[this.splineDimension + 3];\n\n  args.length = this.splineDimension;\n  for (i = 0; i < this.splineDimension; i++) {\n    args[i + 1] = arguments[i + 3];\n  }\n\n  var domain = this.domain;\n  var k0 = domain[dimension][0];\n  var k1 = domain[dimension][1];\n\n  var tm, tp, T;\n  var t0 = args[dimension + 1];\n  var dt = (k1 - k0) * h;\n  if (this.boundary[dimension] === 'closed') {\n    T = k1 - k0;\n    tm = k0 + ((t0 - k0 - dt + T) % T);\n    tp = k0 + ((t0 - k0 + dt + T) % T);\n    dt *= 2;\n  } else {\n    tm = Math.min(k1, Math.max(k0, t0 - dt));\n    tp = Math.min(k1, Math.max(k0, t0 + dt));\n    dt = tp - tm;\n  }\n\n  args[dimension + 1] = tm;\n  args[0] = tmp;\n  this.evaluate.apply(null, args);\n\n  args[dimension + 1] = tp;\n  args[0] = out;\n  this.evaluate.apply(null, args);\n\n  for (i = 0; i < this.dimension; i++) {\n    out[i] = (out[i] - tmp[i]) / dt;\n  }\n\n  return out;\n};\n", "'use strict';\n\nmodule.exports = function ndloop (n, callback) {\n  for (var m = 1, k = 0, i = []; k < n.length; k++) {\n    m *= Array.isArray(n[k]) ? (n[k][1] - n[k][0]) : n[k];\n    i[k] = Array.isArray(n[k]) ? n[k][0] : 0;\n  }\n  for (var ptr = 0; ptr < m; ptr++) {\n    callback(i.slice());\n    for (k = n.length - 1; k >= 0; k--) {\n      if (i[k] === (Array.isArray(n[k]) ? n[k][1] : n[k]) - 1) {\n        i[k] = Array.isArray(n[k]) ? n[k][0] : 0;\n      } else {\n        i[k]++;\n        break;\n      }\n    }\n  }\n};\n", "var inferType = require('./infer-type');\n\nmodule.exports = function (nurbs, variableName, propertyName, data) {\n  var i;\n  var code = [];\n\n  switch (inferType(data)) {\n    case inferType.NDARRAY:\n      code.push('  var ' + variableName + ' = ' + propertyName + '.data;');\n      code.push('  var ' + variableName + 'Offset = ' + propertyName + '.offset;');\n\n      for (i = 0; i < data.dimension; i++) {\n        code.push('  var ' + variableName + 'Stride' + i + ' = ' + propertyName + '.stride[' + i + '];');\n      }\n      break;\n    case inferType.ARRAY_OF_ARRAYS:\n      code.push('  var ' + variableName + ' = ' + propertyName + ';');\n  }\n\n  return code.join('\\n');\n};\n", "'use strict';\n\nvar isNdarrayLike = require('./is-ndarray-like');\n\nmodule.exports = function (data, dataVariableName, dimension) {\n  if (!data) {\n    return 'this.size[' + dimension + ']';\n  } else if (isNdarrayLike(data)) {\n    return dataVariableName + '.shape[' + dimension + ']';\n  } else {\n    var str = dataVariableName;\n    for (var i = 0; i < dimension; i++) {\n      str += '[0]';\n    }\n    return str + '.length';\n  }\n};\n", "/* eslint-disable no-new-func */\n\n'use strict';\n\nvar ndloop = require('./utils/ndloop');\nvar variable = require('./utils/variable');\nvar accessorPreamble = require('./utils/accessor-preamble');\nvar inferType = require('./utils/infer-type');\nvar isArrayLike = require('./utils/is-array-like');\nvar sizeGetter = require('./utils/size-getter');\n\nvar evaluatorCache = {};\nvar codeCache = {};\n\nmodule.exports = function (cacheKey, nurbs, accessors, debug, checkBounds, isBasis, derivative) {\n  var splineDimension = nurbs.splineDimension;\n  var i, j, n, m, d, kvar;\n\n  var points = nurbs.points;\n  var degree = nurbs.degree;\n  var weights = nurbs.weights;\n  var hasWeights = weights !== undefined;\n  var knots = nurbs.knots;\n  var spaceDimension = nurbs.dimension;\n  var boundary = nurbs.boundary;\n\n  if (derivative !== undefined && derivative !== null) {\n    if (!Array.isArray(derivative)) {\n      derivative = [derivative];\n    }\n    var totalDerivativeOrder = 0;\n    for (i = 0; i < splineDimension; i++) {\n      if (derivative[i] === undefined) derivative[i] = 0;\n      totalDerivativeOrder += derivative[i];\n    }\n    if (hasWeights && totalDerivativeOrder > 1) {\n      throw new Error('Analytical derivative not implemented for rational b-splines with order n = ' + totalDerivativeOrder + '.');\n    }\n  }\n\n  if (isBasis) cacheKey = 'Basis' + cacheKey;\n  if (derivative) cacheKey = 'Der' + derivative.join('_') + '_' + cacheKey;\n  var cachedEvaluator = evaluatorCache[cacheKey];\n  if (debug) {\n    var logger = typeof debug === 'function' ? debug : console.log;\n  }\n\n  if (cachedEvaluator) {\n    if (debug) {\n      logger(codeCache[cacheKey]);\n    }\n\n    return cachedEvaluator.bind(nurbs);\n  }\n\n  var code = [];\n  var functionName = 'evaluate' + cacheKey;\n\n  var pointAccessor = accessors.point;\n  if (isBasis) {\n    pointAccessor = function (src, period) {\n      var terms = [];\n      for (var i = 0; i < src.length; i++) {\n        var accessor = src[i];\n        var terms2 = [];\n        for (var j = 0; j < accessor.length; j++) {\n          if (accessor[j] !== 0) terms2.push(accessor[j]);\n        }\n        accessor = terms2.join(' + ');\n        if (period[i]) {\n          accessor = '(' + accessor + ' + ' + period[i] + ') % ' + period[i];\n        }\n        terms.push(accessor + ' === ' + indexVar(i));\n      }\n      return '((' + terms.join(' && ') + ') ? 1 : 0)';\n    };\n  }\n  var weightAccessor = accessors.weight;\n  var knotAccessor = accessors.knot;\n\n  var knotVar = variable('k');\n  var pointVar = variable('x');\n  var weightVar = variable('w');\n  var indexVar = variable('i');\n  var tVar = variable('t');\n  var domainVar = debug ? 'domain' : 'd';\n  var sizeVar = variable(debug ? 'size' : 's');\n  var knotIndex = variable(debug ? 'knotIndex' : 'j');\n\n  var allDimensionUniform = true;\n  for (d = 0; d < splineDimension; d++) {\n    if (isArrayLike(knots) && isArrayLike(knots[d])) {\n      allDimensionUniform = false;\n    }\n  }\n\n  // Just to indent properly and save lots of typing\n  function line (str) {\n    code.push('  ' + (str || ''));\n  }\n  function debugLine (str) {\n    if (debug) line(str);\n  }\n  // function clog (str) {\n    // if (debug) code.push('console.log(\"' + str + ' =\", ' + str + ');');\n  // }\n\n  if (isBasis) {\n    var indexArgs = [];\n  }\n  var parameterArgs = [];\n  for (i = 0; i < splineDimension; i++) {\n    if (isBasis) {\n      indexArgs.push(indexVar([i]));\n    }\n    parameterArgs.push(tVar([i]));\n  }\n\n  code.push('function ' + functionName + ' (' +\n    (isBasis ? '' : 'out, ') +\n    parameterArgs.join(', ') +\n    (isBasis ? ', ' + indexArgs.join(', ') : '') +\n    ') {');\n\n  line('var h, m, a, b;');\n\n  if (checkBounds) {\n    line('var ' + domainVar + ' = this.domain;');\n    line('for (var i = 0; i < this.splineDimension; i++) {');\n    line('  a = arguments[i + 1];');\n    line('  if (a < ' + domainVar + '[i][0] || a > ' + domainVar + '[i][1] || a === undefined || isNaN(a)) {');\n    line('    throw new Error(\\'Invalid Spline parameter in dimension \\'+i+\\'. Valid domain is [\\'+' + domainVar + '[i][0]+\\', \\'+' + domainVar + '[i][1]+\\']. but got t\\'+i+\\' = \\'+arguments[i + 1]+\\'.\\');');\n    line('  }');\n    line('}');\n  }\n\n  for (d = 0; d < splineDimension; d++) {\n    line('var ' + sizeVar(d) + ' = ' + sizeGetter(points, 'this.points', d) + ';');\n  }\n  code.push(accessorPreamble(nurbs, 'x', 'this.points', points));\n\n  if (hasWeights) {\n    code.push(accessorPreamble(nurbs, 'w', 'this.weights', weights));\n  }\n\n  if (!allDimensionUniform) {\n    code.push(accessorPreamble(nurbs, 'k', 'this.knots', knots));\n  }\n\n  function ternary (cond, a, b) {\n    return '(' + cond + ') ? (' + a + ') : (' + b + ')';\n  }\n\n  var hasKnots = [];\n  for (d = 0; d < splineDimension; d++) {\n    switch (inferType(knots)) {\n      case inferType.NDARRAY:\n        hasKnots[d] = true;\n        break;\n      case inferType.ARRAY_OF_ARRAYS:\n        hasKnots[d] = isArrayLike(knots[d]);\n        break;\n    }\n  }\n\n  for (d = 0; d < splineDimension; d++) {\n    if (hasKnots[d]) {\n      //\n      // LOCATE KNOTS\n      //\n      debugLine('\\n  // Bisect to locate the knot interval in dimension ' + d + '\\n');\n      line('var ' + knotIndex(d) + ' = 0;');\n      line('h = ' + sizeVar(d) + ';');\n      line('while(h > ' + knotIndex(d) + ' + 1) {');\n      line('  m = 0.5 * (h + ' + knotIndex(d) + ') | 0;');\n      line('  if (' + knotAccessor([d, 'm']) + ' > ' + tVar(d) + ') h = m;');\n      line('  else ' + knotIndex(d) + ' = m;');\n      line('}');\n\n      debugLine('\\n  // Fetch knots for dimension ' + d + '\\n');\n\n      for (i = -degree[d] + 1; i <= degree[d]; i++) {\n        if (boundary[d] === 'closed') {\n          if (i < 0) {\n            // line('var ' + knotVar([d, i + degree[d] - 1]) + ' = ' + knotAccessor([d, [knotIndex(d), i]]) + ';');\n            // EDIT THIS SECTION\n            line('var ' + knotVar([d, i + degree[d] - 1]) + ' = ' + ternary(\n              knotIndex(d) + ' < ' + (-i),\n              knotAccessor([d, 0]) + ' + ' + knotAccessor([d, [sizeVar(d), knotIndex(d), i]]) + ' - ' + knotAccessor([d, [sizeVar(d)]]),\n              knotAccessor([d, [knotIndex(d), i]])\n            ) + ';');\n          } else if (i > 0) {\n            line('var ' + knotVar([d, i + degree[d] - 1]) + ' = ' + ternary(\n              knotIndex(d) + ' + ' + i + ' > ' + sizeVar(d),\n              // knotAccessor([d, sizeVar(d)]) + ' + ' + knotAccessor([d, i]) + ' - ' + knotAccessor([d, 0]),\n              knotAccessor([d, sizeVar(d)]) + ' + ' + knotAccessor([d, i + ' + ' + knotIndex(d) + ' - ' + sizeVar(d)]) + ' - ' + knotAccessor([d, 0]),\n              knotAccessor([d, [knotIndex(d), i]])\n            ) + ';');\n          } else {\n            line('var ' + knotVar([d, i + degree[d] - 1]) + ' = ' + knotAccessor([d, [knotIndex(d), i]]) + ';');\n          }\n        } else {\n          line('var ' + knotVar([d, i + degree[d] - 1]) + ' = ' + knotAccessor([d, [knotIndex(d), i]]) + ';');\n        }\n      }\n    } else {\n      //\n      // UNIFORM B-SPLINE\n      //\n      debugLine('\\n  // Directly compute knot interval for dimension ' + d + '\\n');\n\n      if (boundary[d] === 'closed') {\n        line(knotIndex(d) + ' = (' + tVar(d) + ' | 0) % ' + sizeVar(d) + ';');\n      } else {\n        line(knotIndex(d) + ' = (' + tVar(d) + ' | 0);');\n        line('if (' + knotIndex(d) + ' < ' + degree[d] + ') ' + knotIndex(d) + ' = ' + degree[d] + ';');\n        line('if (' + knotIndex(d) + ' > ' + sizeVar(d) + ' - 1) ' + knotIndex(d) + ' = ' + sizeVar(d) + ' - 1;');\n      }\n\n      debugLine('\\n  // Compute and clamp knots for dimension ' + d + '\\n');\n      for (i = -degree[d] + 1; i <= degree[d]; i++) {\n        kvar = knotVar([d, i + degree[d] - 1]);\n        line('var ' + kvar + ' = ' + knotIndex(d) + ' + ' + (i) + ';');\n      }\n\n      if (boundary[d] === 'clamped') {\n        for (i = -degree[d] + 1; i <= degree[d]; i++) {\n          kvar = knotVar([d, i + degree[d] - 1]);\n          if (i < 0) {\n            line('if (' + kvar + ' < ' + degree[d] + ') ' + kvar + ' = ' + degree[d] + ';');\n          }\n          if (i > 0) {\n            line('if (' + kvar + ' > ' + sizeVar(d) + ') ' + kvar + ' = ' + sizeVar(d) + ';');\n          }\n        }\n      }\n\n      if (boundary[d] === 'closed') {\n        debugLine('\\n  // Wrap the B-Spline parameter for closed boundary');\n        line(tVar(d) + ' %= ' + sizeVar(d) + ';');\n      }\n    }\n  }\n\n  for (d = 0, n = []; d < splineDimension; d++) {\n    n[d] = degree[d] + 1;\n  }\n\n  if (hasWeights) {\n    debugLine('\\n  // Fetch weights\\n');\n    ndloop(n, function (dst) {\n      var readIdx = [];\n      var period = [];\n      for (var d = 0; d < splineDimension; d++) {\n        readIdx[d] = [knotIndex(d), dst[d] - degree[d]];\n        if (boundary[d] === 'closed' && dst[d] - degree[d] < 0) period[d] = sizeVar(d);\n      }\n      line('var ' + weightVar(dst) + ' = ' + weightAccessor(readIdx, period) + ';');\n    });\n  }\n\n  if (debug) {\n    if (hasWeights) {\n      line('\\n  // Fetch points and project into homogeneous (weighted) coordinates\\n');\n    } else {\n      line('\\n  // Fetch points\\n');\n    }\n  }\n\n  ndloop(n, function (dst) {\n    var readIdx = [];\n    var period = [];\n    for (var d = 0; d < splineDimension; d++) {\n      readIdx[d] = [knotIndex(d), dst[d] - degree[d]];\n      if (boundary[d] === 'closed' && dst[d] - degree[d] < 0) period[d] = sizeVar(d);\n    }\n    if (isBasis) {\n      if (hasWeights) {\n        line('var ' + pointVar(dst) + ' = ' + pointAccessor(readIdx, period) + ' * ' + weightVar(dst) + ';');\n      } else {\n        line('var ' + pointVar(dst) + ' = ' + pointAccessor(readIdx, period) + ';');\n      }\n    } else {\n      for (d = 0; d < spaceDimension; d++) {\n        var dstWithDim = dst.concat(d);\n        readIdx[splineDimension] = d;\n        if (hasWeights) {\n          line('var ' + pointVar(dstWithDim) + ' = ' + pointAccessor(readIdx, period) + ' * ' + weightVar(dst) + ';');\n        } else {\n          line('var ' + pointVar(dstWithDim) + ' = ' + pointAccessor(readIdx, period) + ';');\n        }\n      }\n    }\n  });\n  debugLine('\\n');\n\n  debugLine('// Perform De Boor\\'s algorithm');\n  for (d = n.length - 1; d >= 0; d--) {\n    n[d] = [degree[d], degree[d] + 1];\n    for (i = 0; i < degree[d]; i++) {\n      debugLine('\\n  // Degree ' + degree[d] + ' evaluation in dimension ' + d + ', step ' + (i + 1) + '\\n');\n      for (j = degree[d]; j > i; j--) {\n        var isDerivative = derivative && (degree[d] - i - derivative[d] <= 0);\n\n        if (isDerivative) {\n          line('m = 1 / (' + knotVar([d, j - i + degree[d] - 1]) + ' - ' + knotVar([d, j - 1]) + ');');\n          if (hasWeights) {\n            line('a = (' + tVar(d) + ' - ' + knotVar([d, j - 1]) + ') * m;');\n            line('b = 1 - a;');\n          }\n        } else {\n          line('a = (' + tVar(d) + ' - ' + knotVar([d, j - 1]) + ') / (' + knotVar([d, j - i + degree[d] - 1]) + ' - ' + knotVar([d, j - 1]) + ');');\n          line('b = 1 - a;');\n        }\n\n        if (hasWeights) {\n          ndloop(n, function (ii) {\n            var ij = ii.slice();\n            var ij1 = ii.slice();\n            ij[d] = j;\n            ij1[d] = j - 1;\n            if (isDerivative && hasWeights) line('h = ' + weightVar(ij) + ';');\n            line(weightVar(ij) + ' = b * ' + weightVar(ij1) + ' + a * ' + weightVar(ij) + ';');\n          });\n        }\n        ndloop(n, function (ii) {\n          var weightFactor, pt1, pt2;\n          var ij = ii.slice();\n          var ij1 = ii.slice();\n          // Replace the dimension being interpolated with the interpolation indices\n          ij[d] = j;\n          ij1[d] = j - 1;\n          // Create a version to which we can append the dimension when we loop over spatial dimension\n          if (isDerivative) {\n            var derivCoeff = i + 1;\n            if (isBasis) {\n              weightFactor = hasWeights ? 'h * ' + weightVar(ij1) + ' / ' + weightVar(ij) + ' * ' : '';\n              pt1 = pointVar(ij) + (hasWeights ? ' / h' : '');\n              pt2 = pointVar(ij1) + (hasWeights ? ' / ' + weightVar(ij1) : '');\n              line(pointVar(ij) + ' = ' + derivCoeff + ' * ' + weightFactor + '(' + pt1 + ' - ' + pt2 + ') * m;');\n            } else {\n              var ijWithDimension = ij.slice();\n              var ij1WithDimension = ij1.slice();\n              for (m = 0; m < spaceDimension; m++) {\n                ijWithDimension[splineDimension] = ij1WithDimension[splineDimension] = m;\n                weightFactor = hasWeights ? 'h * ' + weightVar(ij1) + ' / ' + weightVar(ij) + ' * ' : '';\n                pt1 = pointVar(ijWithDimension) + (hasWeights ? ' / h' : '');\n                pt2 = pointVar(ij1WithDimension) + (hasWeights ? ' / ' + weightVar(ij1) : '');\n                line(pointVar(ijWithDimension) + ' = ' + derivCoeff + ' * ' + weightFactor + '(' + pt1 + ' - ' + pt2 + ') * m;');\n              }\n            }\n          } else {\n            if (isBasis) {\n              line(pointVar(ij) + ' = b * ' + pointVar(ij1) + ' + a * ' + pointVar(ij) + ';');\n            } else {\n              for (m = 0; m < spaceDimension; m++) {\n                ij[splineDimension] = ij1[splineDimension] = m;\n                line(pointVar(ij) + ' = b * ' + pointVar(ij1) + ' + a * ' + pointVar(ij) + ';');\n              }\n            }\n          }\n        });\n        debugLine('\\n');\n      }\n    }\n  }\n\n  if (debug) {\n    if (hasWeights) {\n      line('\\n  // Project back from homogeneous coordinates and return final output\\n');\n    } else {\n      line('\\n  // Return final output\\n');\n    }\n  }\n  if (isBasis) {\n    if (hasWeights) {\n      line('return ' + pointVar(degree) + ' / ' + weightVar(degree) + ';');\n    } else {\n      line('return ' + pointVar(degree) + ';');\n    }\n  } else {\n    for (d = 0; d < spaceDimension; d++) {\n      if (hasWeights) {\n        line('out[' + d + '] = ' + pointVar(degree.concat([d])) + ' / ' + weightVar(degree) + ';');\n      } else {\n        line('out[' + d + '] = ' + pointVar(degree.concat([d])) + ';');\n      }\n    }\n  }\n  if (!isBasis) {\n    line('return out;');\n  }\n  code.push('}');\n\n  if (debug) {\n    var codeStr = code.join('\\n');\n    logger(codeStr);\n\n    codeCache[cacheKey] = codeStr;\n  }\n\n  var evaluator = new Function([code.join('\\n'), '; return ', functionName].join(''))();\n  evaluatorCache[cacheKey] = evaluator;\n  return evaluator.bind(nurbs);\n};\n", "/* eslint-disable no-new-func */\n\n'use strict';\n\nvar transformerCache = {};\nvar accessorPreamble = require('./utils/accessor-preamble');\nvar sizeGetter = require('./utils/size-getter');\nvar variable = require('./utils/variable');\n\nmodule.exports = function createTransform (cacheKey, nurbs, accessors, debug) {\n  var i, j, iterator, iterators, terms, n, rvalue, lvalue;\n  var cachedTransformer = transformerCache[cacheKey];\n  if (cachedTransformer) {\n    return cachedTransformer.bind(nurbs);\n  }\n\n  var code = [];\n  var functionName = 'transform' + cacheKey;\n\n  code.push('function ' + functionName + '(m) {');\n  code.push('var i, w;');\n  code.push(accessorPreamble(nurbs, 'x', 'this.points', nurbs.points));\n\n  var sizeVar = variable(debug ? 'size' : 's');\n  for (i = 0; i < nurbs.splineDimension; i++) {\n    code.push('var ' + sizeVar(i) + ' = ' + sizeGetter(nurbs.points, 'this.points', i) + ';');\n  }\n\n  iterators = [];\n  for (i = 0; i < nurbs.splineDimension; i++) {\n    iterator = 'i' + i;\n    iterators.push(iterator);\n    code.push('for (' + iterator + ' = ' + sizeVar(i) + '- 1; ' + iterator + ' >= 0; ' + iterator + '--) {');\n  }\n\n  for (i = 0; i < nurbs.dimension; i++) {\n    code.push('x' + i + ' = ' + accessors.point(iterators.concat([i])));\n  }\n\n  terms = [];\n  for (i = 0; i < nurbs.dimension; i++) {\n    terms.push('m[' + ((nurbs.dimension + 1) * (i + 1) - 1) + '] * x' + i);\n  }\n  terms.push('m[' + ((nurbs.dimension + 1) * (nurbs.dimension + 1) - 1) + ']');\n  code.push('var w = (' + terms.join(' + ') + ') || 1.0;');\n\n  for (i = 0; i < nurbs.dimension; i++) {\n    terms = [];\n    n = nurbs.dimension;\n    for (j = 0; j < n; j++) {\n      terms.push('m[' + (j * (n + 1) + i) + '] * x' + j);\n    }\n    terms.push('m[' + (j * (n + 1) + i) + ']');\n    lvalue = accessors.point(iterators.concat([i]));\n    rvalue = '(' + terms.join(' + ') + ') / w';\n    code.push(lvalue + ' = ' + rvalue + ';');\n  }\n\n  for (i = nurbs.splineDimension - 1; i >= 0; i--) {\n    code.push('}');\n  }\n\n  code.push('return this;');\n  code.push('}');\n\n  var transform = new Function([code.join('\\n'), '; return ', functionName].join(''))();\n\n  if (debug) console.log(code.join('\\n'));\n\n  transformerCache[cacheKey] = transform;\n  return transform.bind(nurbs);\n};\n", "/* eslint-disable no-new-func */\n\n'use strict';\n\nvar ndloop = require('./utils/ndloop');\nvar variable = require('./utils/variable');\nvar accessorPreamble = require('./utils/accessor-preamble');\nvar inferType = require('./utils/infer-type');\nvar isArrayLike = require('./utils/is-array-like');\nvar sizeGetter = require('./utils/size-getter');\n\nvar supportCache = {};\n\nmodule.exports = function (cacheKey, nurbs, accessors, debug, checkBounds) {\n  var cachedSupport = supportCache[cacheKey];\n  if (cachedSupport) {\n    return cachedSupport.bind(nurbs);\n  }\n\n  var degree = nurbs.degree;\n  var knots = nurbs.knots;\n  var splineDimension = nurbs.splineDimension;\n  var boundary = nurbs.boundary;\n\n  var i, n, d;\n  var code = [];\n  var functionName = 'support' + cacheKey;\n\n  var knotAccessor = accessors.knot;\n\n  var tVar = variable('t');\n  var domainVar = debug ? 'domain' : 'd';\n  var sizeVar = variable(debug ? 'size' : 's');\n  var knotIndex = variable(debug ? 'knotIndex' : 'i');\n\n  var allDimensionUniform = true;\n  for (d = 0; d < splineDimension; d++) {\n    if (isArrayLike(knots) && isArrayLike(knots[d])) {\n      allDimensionUniform = false;\n    }\n  }\n\n  // Just to indent properly and save lots of typing\n  function line (str) {\n    code.push('  ' + (str || ''));\n  }\n\n  var parameterArgs = [];\n  for (i = 0; i < splineDimension; i++) {\n    parameterArgs.push(tVar([i]));\n  }\n\n  code.push('function ' + functionName + ' (out, ' + parameterArgs.join(', ') + ') {');\n\n  var c = 0;\n  function pushSupport (args, period) {\n    if (period === undefined) {\n      line('out[' + (c++) + '] = ' + args.join(' + ') + ';');\n    } else {\n      line('out[' + (c++) + '] = (' + args.join(' + ') + ' + ' + period + ') % ' + period + ';');\n    }\n  }\n\n  line('var h, m;');\n  line('var c = 0;');\n\n  if (checkBounds) {\n    line('var ' + domainVar + ' = this.domain;');\n    line('for (var i = 0; i < this.splineDimension; i++) {');\n    line('  a = arguments[i + 1];');\n    line('  if (a < ' + domainVar + '[i][0] || a > ' + domainVar + '[i][1] || a === undefined || isNaN(a)) {');\n    line('    throw new Error(\\'Invalid Spline parameter in dimension \\'+i+\\'. Valid domain is [\\'+' + domainVar + '[i][0]+\\', \\'+' + domainVar + '[i][1]+\\']. but got t\\'+i+\\' = \\'+arguments[i + 1]+\\'.\\');');\n    line('  }');\n    line('}');\n  }\n\n  for (d = 0; d < splineDimension; d++) {\n    line('var ' + sizeVar(d) + ' = ' + sizeGetter(nurbs.points, 'this.points', d) + ';');\n  }\n\n  if (!allDimensionUniform) {\n    code.push(accessorPreamble(nurbs, 'k', 'this.knots', knots));\n  }\n\n  var hasKnots = [];\n  for (d = 0; d < splineDimension; d++) {\n    switch (inferType(knots)) {\n      case inferType.NDARRAY:\n        hasKnots[d] = true;\n        break;\n      case inferType.ARRAY_OF_ARRAYS:\n        hasKnots[d] = isArrayLike(knots[d]);\n        break;\n    }\n  }\n\n  for (d = 0; d < splineDimension; d++) {\n    if (hasKnots[d]) {\n      line('var ' + knotIndex(d) + ' = 0;');\n      line('h = ' + sizeVar(d) + ';');\n      line('while(h > ' + knotIndex(d) + ' + 1) {');\n      line('  m = 0.5 * (h + ' + knotIndex(d) + ') | 0;');\n      line('  if (' + knotAccessor([d, 'm']) + ' > ' + tVar(d) + ') h = m;');\n      line('  else ' + knotIndex(d) + ' = m;');\n      line('}');\n    } else {\n      if (boundary[d] === 'closed') {\n        line(knotIndex(d) + ' = (' + tVar(d) + ' | 0) % ' + sizeVar(d) + ';');\n      } else {\n        line(knotIndex(d) + ' = (' + tVar(d) + ' | 0);');\n        line('if (' + knotIndex(d) + ' < ' + degree[d] + ') ' + knotIndex(d) + ' = ' + degree[d] + ';');\n        line('if (' + knotIndex(d) + ' > ' + sizeVar(d) + ' - 1) ' + knotIndex(d) + ' = ' + sizeVar(d) + ' - 1;');\n      }\n    }\n  }\n\n  for (d = 0, n = []; d < splineDimension; d++) {\n    n[d] = degree[d] + 1;\n  }\n\n  ndloop(n, function (dst) {\n    var readIdx = [];\n    var period = [];\n    for (var d = 0; d < splineDimension; d++) {\n      readIdx[d] = [knotIndex(d), dst[d] - degree[d]];\n      if (boundary[d] === 'closed' && dst[d] - degree[d] < 0) period[d] = sizeVar(d);\n    }\n    for (d = 0; d < splineDimension; d++) {\n      pushSupport(readIdx[d], period[d]);\n    }\n  });\n\n  line('out.length = ' + c + ';');\n\n  line('return out;');\n  code.push('}');\n\n  if (debug) console.log(code.join('\\n'));\n\n  var evaluator = new Function([code.join('\\n'), '; return ', functionName].join(''))();\n  supportCache[cacheKey] = evaluator;\n  return evaluator.bind(nurbs);\n};\n", "'use strict';\n\nvar inferType = require('./src/utils/infer-type');\nvar computeCacheKey = require('./src/utils/cache-key');\nvar isNdarray = require('./src/utils/is-ndarray');\nvar isNdarrayLike = require('./src/utils/is-ndarray-like');\nvar createAccessors = require('./src/utils/create-accessors');\nvar numericalDerivative = require('./src/numerical-derivative');\nvar isArrayLike = require('./src/utils/is-array-like');\n\nvar createEvaluator = require('./src/evaluate');\nvar createTransform = require('./src/transform');\nvar createSupport = require('./src/support');\n\nvar BOUNDARY_TYPES = {\n  open: 'open',\n  closed: 'closed',\n  clamped: 'clamped'\n};\n\nfunction isBlank (x) {\n  return x === undefined || x === null;\n}\n\nfunction parseNURBS (points, degree, knots, weights, boundary, opts) {\n  var i, dflt;\n\n  if (points && !isArrayLike(points) && !isNdarray(points)) {\n    opts = points;\n    this.debug = points.debug;\n    this.checkBounds = !!points.checkBounds;\n    this.weights = points.weights;\n    this.knots = points.knots;\n    this.degree = points.degree;\n    this.boundary = points.boundary;\n    this.points = points.points;\n    Object.defineProperty(this, 'size', {value: opts.size, writable: true, configurable: true});\n  } else {\n    opts = opts || {};\n    this.weights = weights;\n    this.knots = knots;\n    this.degree = degree;\n    this.points = points;\n    this.boundary = boundary;\n    this.debug = opts.debug;\n    this.checkBounds = !!opts.checkBounds;\n    Object.defineProperty(this, 'size', {value: opts.size, writable: true, configurable: true});\n  }\n\n  var pointType = inferType(this.points);\n  var weightType = inferType(this.weights);\n  var knotType = inferType(this.knots);\n\n  if (this.points) {\n    //\n    // Sanitize the points\n    //\n    switch (pointType) {\n      case inferType.GENERIC_NDARRAY:\n      case inferType.NDARRAY:\n        Object.defineProperties(this, {\n          splineDimension: {\n            value: this.points.shape.length - 1,\n            writable: false,\n            configurable: true\n          },\n          dimension: {\n            value: this.points.shape[this.points.shape.length - 1],\n            writable: false,\n            configurable: true\n          },\n          size: {\n            get: function () {\n              return this.points.shape.slice(0, this.points.shape.length - 1);\n            },\n            set: function () {\n              throw new Error(\"Cannot assign to read only property 'size'\");\n            },\n            configurable: true\n          }\n        });\n        break;\n\n      case inferType.ARRAY_OF_ARRAYS:\n        // Follow the zeroth entries until we hit something that's not an array\n        var splineDimension = 0;\n        var size = this.size || [];\n        size.length = 0;\n        for (var ptr = this.points; isArrayLike(ptr[0]); ptr = ptr[0]) {\n          splineDimension++;\n          size.push(ptr.length);\n        }\n        if (splineDimension === 0) {\n          throw new Error('Expected an array of points');\n        }\n\n        Object.defineProperties(this, {\n          splineDimension: {\n            value: splineDimension,\n            writable: false,\n            configurable: true\n          },\n          dimension: {\n            value: ptr.length,\n            writable: false,\n            configurable: true\n          },\n          size: {\n            get: function () {\n              var size = [];\n              size.length = 0;\n              for (var i = 0, ptr = this.points; i < this.splineDimension; i++, ptr = ptr[0]) {\n                size[i] = ptr.length;\n              }\n              return size;\n            },\n            set: function () {\n              throw new Error(\"Cannot assign to read only property 'size'\");\n            },\n            configurable: true\n          }\n        });\n\n        break;\n      case inferType.PACKED:\n      default:\n        throw new Error('Expected either a packed array, array of arrays, or ndarray of points');\n    }\n  } else {\n    if (this.size === undefined || this.size === null) {\n      throw new Error('Either points or a control hull size must be provided.');\n    }\n    if (!isArrayLike(this.size)) {\n      Object.defineProperty(this, 'size', {\n        value: [this.size],\n        writable: true,\n        configurable: true\n      });\n    }\n    if (this.size.length === 0) {\n      throw new Error('`size` must be a number or an array of length at least one.');\n    }\n\n    Object.defineProperties(this, {\n      splineDimension: {\n        value: this.size.length,\n        writable: false,\n        configurable: true\n      },\n      dimension: {\n        value: 0,\n        writable: false,\n        configurable: true\n      }\n    });\n  }\n\n  //\n  // Sanitize the degree into an array\n  //\n  if (isArrayLike(this.degree)) {\n    for (i = 0; i < this.splineDimension; i++) {\n      if (isBlank(this.degree[i])) {\n        throw new Error('Missing degree in dimension ' + (i + 1));\n      }\n    }\n  } else {\n    var hasBaseDegree = !isBlank(this.degree);\n    var baseDegree = isBlank(this.degree) ? 2 : this.degree;\n    this.degree = [];\n    for (i = 0; i < this.splineDimension; i++) {\n      if (this.size[i] <= baseDegree) {\n        if (hasBaseDegree) {\n          throw new Error('Expected at least ' + (baseDegree + 1) + ' points for degree ' + baseDegree + ' spline in dimension ' + (i + 1) + ' but got only ' + this.size[i]);\n        } else {\n          this.degree[i] = this.size[i] - 1;\n        }\n      } else {\n        this.degree[i] = baseDegree;\n      }\n    }\n  }\n\n  //\n  // Sanitize boundaries\n  //\n  dflt = (typeof this.boundary !== 'string') ? 'open' : this.boundary;\n  if (!BOUNDARY_TYPES[dflt]) {\n    throw new Error('Boundary type must be one of ' + Object.keys(BOUNDARY_TYPES) + '. Got ' + dflt);\n  }\n  this.boundary = isArrayLike(this.boundary) ? this.boundary : [];\n  this.boundary.length = this.splineDimension;\n  for (i = 0; i < this.splineDimension; i++) {\n    this.boundary[i] = isBlank(this.boundary[i]) ? dflt : this.boundary[i];\n\n    if (!BOUNDARY_TYPES[dflt]) {\n      throw new Error('Boundary type must be one of ' + Object.keys(BOUNDARY_TYPES) + '. Got ' + dflt + ' for dimension ' + (i + 1));\n    }\n  }\n\n  //\n  // Sanitize knots\n  //\n  switch (knotType) {\n    case inferType.ARRAY_OF_ARRAYS:\n      // Wrap flat arrays in an array so that curves are more natural\n      if (isArrayLike(this.knots) && this.knots.length > 0 && !isArrayLike(this.knots[0])) {\n        this.knots = [this.knots];\n      }\n\n      for (i = 0; i < this.splineDimension; i++) {\n        if (this.size[i] <= this.degree[i]) {\n          throw new Error('Expected at least ' + (this.degree[i] + 1) + ' points in dimension ' + (i + 1) + ' but got ' + this.size[i] + '.');\n        }\n\n        if (isArrayLike(this.knots[i])) {\n          if (this.boundary[i] !== 'closed' && this.knots[i].length !== this.degree[i] + this.size[i] + 1) {\n            throw new Error('Expected ' + (this.degree[i] + this.size[i] + 1) + ' knots in dimension ' + (i + 1) + ' but got ' + this.knots[i].length + '.');\n          } else if (this.boundary[i] === 'closed' && this.knots[i].length !== this.size[i] + 1) {\n            // Fudge factor allowance for just ignoring extra knots. This makes some allowance\n            // for passing regular clamped/open spline knots to a closed spline by ignoring extra\n            // knots instead of simply truncating.\n            var canBeFudged = this.knots[i].length === this.size[i] + this.degree[i] + 1;\n            if (!canBeFudged) {\n              throw new Error('Expected ' + (this.size[i] + 1) + ' knots for closed spline in dimension ' + (i + 1) + ' but got ' + this.knots[i].length + '.');\n            }\n          }\n        }\n      }\n      break;\n    case inferType.NDARRAY:\n      break;\n  }\n\n  //\n  // Create evaluator\n  //\n  var newCacheKey = computeCacheKey(this, this.debug, this.checkBounds, pointType, weightType, knotType);\n\n  if (newCacheKey !== this.__cacheKey) {\n    this.__cacheKey = newCacheKey;\n\n    var accessors = createAccessors(this);\n\n    this.evaluate = createEvaluator(this.__cacheKey, this, accessors, this.debug, this.checkBounds, false);\n    this.transform = createTransform(this.__cacheKey, this, accessors, this.debug);\n    this.support = createSupport(this.__cacheKey, this, accessors, this.debug, this.checkBounds);\n\n    this.evaluator = function (derivativeOrder, isBasis) {\n      return createEvaluator(this.__cacheKey, this, accessors, this.debug, this.checkBounds, isBasis, derivativeOrder);\n    };\n  }\n\n  this.numericalDerivative = numericalDerivative.bind(this);\n\n  return this;\n}\n\nfunction domainGetter () {\n  var sizeArray;\n  var ret = [];\n\n  // If the reference to size is hard-coded, then the size cannot change, or\n  // if you change points manually (like by appending a point) without re-running\n  // the constructor, then it'll be incorrect. This aims for middle-ground\n  // by querying the size directly, based on the point data type\n  //\n  // A pointer to the point array-of-arrays:\n  var ptr = this.points;\n\n  if (!ptr) {\n    // If there are no points, then just use this.size\n    sizeArray = this.size;\n  } else if (isNdarrayLike(ptr)) {\n    // If it's an ndarray, use the ndarray's shape property\n    sizeArray = ptr.shape;\n  }\n\n  for (var d = 0; d < this.splineDimension; d++) {\n    var size = sizeArray ? sizeArray[d] : ptr.length;\n    var p = this.degree[d];\n    var isClosed = this.boundary[d] === 'closed';\n\n    if (this.knots && this.knots[d]) {\n      var k = this.knots[d];\n      ret[d] = [k[isClosed ? 0 : p], k[size]];\n    } else {\n      ret[d] = [isClosed ? 0 : p, size];\n    }\n\n    // Otherwise if it's an array of arrays, we get the size of the next\n    // dimension by recursing into the points\n    if (ptr) ptr = ptr[0];\n  }\n  return ret;\n}\n\n// Evaluate Non-Uniform Rational B-Splines (NURBS)\n// @param points {Array} - data array\n// @param degree {Array} - spline curve degree\n// @param knots {Array} - knot vector\n// @param weights {Array} - weight vector\n// @param opts {object} - additional options\nfunction nurbs (points, degree, knots, weights, boundary, opts) {\n  var ctor = function (points, degree, knots, weights, boundary, opts) {\n    parseFcn(points, degree, knots, weights, boundary, opts);\n    return ctor;\n  };\n\n  var parseFcn = parseNURBS.bind(ctor);\n\n  Object.defineProperty(ctor, 'domain', {\n    get: domainGetter\n  });\n\n  parseFcn(points, degree, knots, weights, boundary, opts);\n\n  return ctor;\n}\n\nmodule.exports = nurbs;\n"],
  "mappings": "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",
  "names": ["createVariable", "i", "j", "d", "d", "size", "i", "ptr", "points", "degree", "knots", "weights", "boundary", "opts"]
}
